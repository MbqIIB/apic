---
swagger: "2.0"
info:
  x-ibm-name: "events"
  title: "Events"
  version: "1.0.0"
  description: "Sample API using OAuth2 and Cloudant"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/v1"
consumes:
- "application/json"
produces:
- "application/json"
securityDefinitions:
  openid-password:
    type: "oauth2"
    description: ""
    flow: "password"
    scopes:
      openid: ""
      citizen: ""
    tokenUrl: "https://api.eu-de.apiconnect.ibmcloud.com/fdutorg-dev/sb/oauth2/token"
  clientSecretHeader:
    type: "apiKey"
    description: ""
    in: "header"
    name: "X-IBM-Client-Secret"
  clientIdHeader:
    type: "apiKey"
    in: "header"
    name: "X-IBM-Client-Id"
security:
- clientIdHeader: []
  clientSecretHeader: []
  openid-password:
  - "openid"
  - "citizen"
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - operation-switch:
        title: "operation-switch"
        case:
        - operations:
          - verb: "get"
            path: "/events"
          execute:
          - invoke:
              title: "invoke"
              timeout: 60
              verb: "GET"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error:
              - null
              version: "1.0.0"
              target-url: "https://$(db-url)/$(db-name)/_design/eventsDoc/_view/findAll?limit=20&reduce=false&include_docs=true"
              username: "$(db-userid)"
              password: "$(db-pwd)"
        - operations:
          - "createEvent"
          execute:
          - invoke:
              title: "Create"
              timeout: 60
              verb: "POST"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error:
              - null
              version: "1.0.0"
              target-url: "https://$(db-url)/$(db-name)/"
              username: "$(db-userid)"
              password: "$(db-pwd)"
        - operations:
          - "deleteEvent"
          execute:
          - invoke:
              title: "Delete"
              timeout: 60
              verb: "DELETE"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error:
              - null
              version: "1.0.0"
              target-url: "https://$(db-url)/$(db-name)/$(request.parameters.id)?rev=$(request.parameters.rev)"
              username: "$(db-userid)"
              password: "$(db-pwd)"
        - operations:
          - verb: "put"
            path: "/events"
          execute:
          - invoke:
              title: "Update"
              timeout: 60
              verb: "PUT"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error:
              - null
              version: "1.0.0"
              target-url: "https://$(db-url)/$(db-name)/$(request.parameters.id)?rev=$(request.parameters.rev)"
              username: "$(db-userid)"
              password: "$(db-pwd)"
        otherwise: []
        version: "1.0.0"
  phase: "realized"
  properties:
    db-name:
      value: "events"
      description: ""
      encoded: false
    db-pwd:
      value: "93b335531db4ad484cfe2a109fb5c79cef1cd9f3"
      description: "password"
      encoded: false
    db-userid:
      value: "aderendryingstivencestan"
      description: "username"
      encoded: false
    db-url:
      value: "054025b7-d25a-46e9-b076-77f1452a9034-bluemix.cloudant.com"
      description: "DB url"
      encoded: false
  gateway: "datapower-gateway"
  catalogs: {}
paths:
  /events:
    get:
      responses:
        200:
          description: "200 OK"
      tags:
      - "events"
      summary: "Get all Events"
    post:
      tags:
      - "events"
      summary: "Create an event"
      description: "This can only be done by the logged in user."
      operationId: "createEvent"
      parameters:
      - name: "event"
        in: "body"
        description: "Created event object"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Event"
      produces: []
      consumes: []
    delete:
      responses:
        200:
          description: "200 OK"
      operationId: "deleteEvent"
      summary: "Delete a event"
      description: "This can only be done by the logged in user."
    put:
      responses:
        200:
          description: "200 OK"
definitions:
  EventCategory:
    type: "object"
    description: "Event Category (Accident, Evènementiel, Intrusion, Télémetrie, Information,\
      \ etc.)"
    required:
    - "id"
    - "label"
    properties:
      id:
        type: "number"
        format: "int32"
        description: "Internal identifier"
      label:
        type: "string"
        description: "Display Name"
        maxLength: 255
  Event:
    type: "object"
    required:
    - "id"
    - "title"
    - "timestamp"
    - "category"
    properties:
      id:
        type: "number"
        format: "int64"
        description: "Internal identifier"
      title:
        type: "string"
        description: "Short description"
        maxLength: 255
      timestamp:
        type: "string"
        format: "date-time"
        description: "Last update on"
      description:
        type: "string"
        description: "Complete Event Description"
        default: "3 (Normal)"
        enum:
        - "1 (High)"
        - "2 (Medium)"
        - "3 (Normal)"
        - "4 (Low)"
      status:
        type: "string"
        default: "Open"
        enum:
        - "Open"
        - "Close"
      category:
        $ref: "#/definitions/EventCategory"
    additionalProperties: false
  Profil:
    type: "object"
    description: "Population : Citoyens, Elus, Ville, Hyperviseur, Admin"
    required:
    - "id"
    - "name"
    - "categories"
    properties:
      id:
        type: "number"
        format: "int64"
        description: "Internal Identifier"
      name:
        type: "string"
        maxLength: 100
        description: "Display Name"
      categories:
        type: "array"
        items:
          $ref: "#/definitions/EventCategory"
        description: "Authorized event categories"
  User:
    type: "object"
    required:
    - "id"
    - "userName"
    - "lastName"
    - "profil"
    properties:
      id:
        type: "number"
        format: "int64"
        description: "Internal identifier"
      userName:
        type: "string"
        description: "Login"
      firstName:
        type: "string"
        description: "First Name"
      lastName:
        type: "string"
        description: "Last Name"
      email:
        type: "string"
        description: "E-mail address"
      status:
        type: "string"
        description: "Indicates whether the user is active or not"
        default: "Active"
        enum:
        - "Active"
        - "Inactive"
      profil:
        $ref: "#/definitions/Profil"
  ErrorResponse:
    type: "object"
    properties:
      error:
        type: "string"
        description: "Short error description"
        example: "invalid_credential"
      error_description:
        type: "string"
        description: "Full error description (including the origin, if any)"
        example: "[Main courante] User was not authenticated"
      error_uri:
        type: "string"
        description: "Help link if relevant"
tags: []
parameters:
  rev:
    name: "rev"
    type: "string"
    required: false
    in: "query"
    description: "revision for delete"
  id:
    name: "id"
    type: "string"
    required: false
    in: "query"
    description: "id for delete"
